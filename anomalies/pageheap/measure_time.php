<?php

$time = $_GET['time'];
$small = $_GET['small'];
$big = $_GET['big'];

$tosave = $time . ',' . $small . ',' . $big . "\n";

file_put_contents("anal.txt", $tosave, FILE_APPEND);

?>

<html>
<h1>Test PageHeap</h1>

<script>
var ALLOC_TIME = 20; //ms
var HOLES_ITER = 3000;

//alert("start");

function NoAllocStore(count) {
    this.count = count;
    this.array = new Array(count);
    for(var i=0; i<count; i++) {
	this.array[i] = 0x41414141;
    }
    this.index = 0;
}

NoAllocStore.prototype.store = function(obj) {
    if (this.index >= this.count) {
	//alert("bad");
	location.reload();
	throw false;
    }
    this.array[this.index] = obj;
    this.index++;
}

NoAllocStore.prototype.freeAll = function() {
    for(var i=0; i<this.count; i++) {
	delete this.array[i];
	this.array[i] = 0x41414141;
    }
}
var nstore = new NoAllocStore(100000);

function doFor(fun, time) {
    var i = 0;
    var startTime = performance.now();
    do {
	for(var j=0; j<100; j++)
	    nstore.store(fun());
	i++;
    } while((performance.now() - startTime) < time);
    return i;
}

function allocPageBA() {
    return new Uint8Array(0x1000);
}

function allocSmallBA() {
    return new Uint8Array(0x10);
}

// Try to fill previous holes in the heap
// var store = new Array();
// for(var i = 0; i < HOLES_ITER; i++) {
//     store.push(allocPageBA());
//     store.push(allocSmallBA());
// }

// Measure
var bigRet = doFor(allocPageBA, ALLOC_TIME);
var smallRet = doFor(allocSmallBA, ALLOC_TIME);

nstore.freeAll();

//alert(bigRet);
//alert(smallRet);

// Send to server, repeat
var saveUrl = location.protocol + '//' + location.host + location.pathname;
saveUrl += "?time=" + ALLOC_TIME.toString() + "&small=" + smallRet.toString() + "&big=" + bigRet.toString();
location.href = saveUrl

</script>
</html>
